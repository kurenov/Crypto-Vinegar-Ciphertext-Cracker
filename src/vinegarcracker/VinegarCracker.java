/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vinegarcracker;

import java.util.Arrays;
import java.util.Stack;

/**
 *
 * @author Olzhas
 */
public class VinegarCracker {

  /**
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    //Lincoln
//    String hex
    //Education with spaces
    String hex
    //Education no spaces
    //String hex
    //Instructor Cipher
//    String hex = "F96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794";
    int[] freq = new int[256];
    int length = hex.length() / 2;
    int[] ctext = new int[length];
    int keyLength = 5;
    int minKeyLength = 1;
    int maxKeyLength = 470;
    double qSum = 0.065;
    double minDifference = 1;
    int minDifferenceIndex = 0;
    double treshold = 0.005;

    //from HEX to DEC
    for (int i = 0; i < length; i++) {
      int j = i * 2;
      int x = Integer.decode("0x" + hex.substring(j, j + 2));
      ctext[i] = x;
      System.out.print(x + " ");
    }
    System.out.println();
    //KEY LENGTH SEARCHING
    for (int i = minKeyLength; i <= maxKeyLength; i++) {
      int k = 0;
      double counter = 0;
      while (k < length) {
        freq[ctext[k]]++;
        k += i;
        counter++;
      }

      double sum = 0;
      double normFreq = 0;
      for (int m = 0; m < freq.length; m++) {
        normFreq = (double) (freq[m] / counter);
        sum = sum + normFreq * normFreq;
      }

      if (Math.abs(qSum - sum) < minDifference) {
        minDifference = Math.abs(qSum - sum);
        minDifferenceIndex = i;
      }
      if (Math.abs(qSum - sum) <= treshold) {
        System.out.println("Possible Key Length: " + i + " - " + Math.abs(qSum - sum));
      }
//      System.out.println(i+": "+sum);
      for (int m = 0; m < freq.length; m++) {
        freq[m] = 0;
      }
    }
    System.out.println("Estimated Key Length: " + minDifferenceIndex);
    keyLength = 5;

    //Key Searching
    int key[] = new int[keyLength];
    for (int i = 0; i < keyLength; i++) {
      int k = i;
      int max = 0;
      Stack maxStack = new Stack();
      Stack maxIndexStack = new Stack();
      int maxIndex = 0;
      while (k < length) {
        int x = ctext[k];
        freq[x]++;
        if (freq[x] > max && maxIndex!=x && x>32 && x<127) {
          max = freq[x];
          maxStack.push(max);
          maxIndex = x;
          maxIndexStack.push(Math.abs(maxIndex - 101));
        }
        k += keyLength;
      }
      key[i] = Math.abs(maxIndex - 101);
      System.out.println(i+": "+maxIndex + "-\t (" + max + ") \t" + key[i]);
      System.out.println(Arrays.toString(maxIndexStack.toArray()));
      for (int m = 0; m < freq.length; m++) {
        freq[m] = 0;
      }
    }
    key[0]=4;
    key[1]=1;
    key[2]=2;
    key[3]=25;
//    key[4]=62;
//    key[5]=61;
//    key[6]=12;
//    
//    key[8]=25;
//    key[9]=124;
    for (int i = 0; i < length; i++) {
      int currentKey = key[i % keyLength];
      int x = ctext[i] ^ currentKey;
      String s = Character.toString((char) (x));
      System.out.print(s);
    }

  }
}
